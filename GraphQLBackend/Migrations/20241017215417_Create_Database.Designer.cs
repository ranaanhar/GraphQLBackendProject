// <auto-generated />
using GraphQLBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GraphQLBackend.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20241017215417_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GraphQLBackend.Model.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "91bec565-8d3a-4dc3-8287-9bf1bc60e805",
                            Bio = "Alex Banks is a software engineer, instructor, and coFounder of Moon Highway, a curriculum development company in Northern California",
                            Name = "Alex Banks"
                        });
                });

            modelBuilder.Entity("GraphQLBackend.Model.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "46bf546f-6dcf-4ec7-9bc9-1a54273da8e6",
                            AuthorId = "91bec565-8d3a-4dc3-8287-9bf1bc60e805",
                            ISBN = "3405e44a-866a-4f22-8dc8-dd4653f01862",
                            Title = "Learning GraphQL"
                        });
                });

            modelBuilder.Entity("GraphQLBackend.Model.Book", b =>
                {
                    b.HasOne("GraphQLBackend.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("GraphQLBackend.Model.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
